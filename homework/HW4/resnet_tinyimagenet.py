# -*- coding: utf-8 -*-
"""batch256.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GeqyHVHCx8TDulIfOY5jAG1Xy1INTq8g
"""

#!wget http://cs231n.stanford.edu/tiny-imagenet-200.zip
#!unzip -qq 'tiny-imagenet-200.zip'

import torch
import torch.utils.data
import torchvision
import torchvision.transforms as transforms
import time
import torch.nn as nn
import numpy as np
from torch import optim
import torchvision.datasets as datasets
import os

# We provide the code for loading CIFAR100 data
num_epochs = 40
batch_size = 256
learning_rate = 0.001
# torch.manual_seed(0)
transform_train = transforms.Compose([
    transforms.RandomCrop(64, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
])

transform_val = transforms.Compose([
    transforms.ToTensor(),
])


def create_val_folder(val_dir):
    """
    This method is responsible for separating validation images into separate sub folders
    """
    path = os.path.join(val_dir, 'images')  # path where validation data is present now
    filename = os.path.join(val_dir, 'val_annotations.txt')  # file where image2class mapping is present
    fp = open(filename, "r")  # open file in read mode
    data = fp.readlines()  # read line by line

    # Create a dictionary with image names as key and corresponding classes as values
    val_img_dict = {}
    for line in data:
        words = line.split("\t")
        val_img_dict[words[0]] = words[1]
    fp.close()
    # Create folder if not present, and move image into proper folder
    for img, folder in val_img_dict.items():
        newpath = (os.path.join(path, folder))
        if not os.path.exists(newpath):  # check if folder exists
            os.makedirs(newpath)
        if os.path.exists(os.path.join(path, img)):  # Check if image exists in default directory
            os.rename(os.path.join(path, img), os.path.join(newpath, img))
    return

# Your own directory to the train folder of tiyimagenet
train_dir = '/u/training/tra294/scratch/tiny-imagenet-200/train'
train_dataset = datasets.ImageFolder(train_dir, transform=transform_train)
# To check the index for each classes
# print(train_dataset.class_to_idx)
train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=8)
# Your own directory to the validation folder of tiyimagenet
val_dir = '/u/training/tra294/scratch/tiny-imagenet-200/val/'


if 'val_' in os.listdir(val_dir+'images/')[0]:
    create_val_folder(val_dir)
    val_dir = val_dir+'images/'
else:
    val_dir = val_dir+'images/'


val_dataset = datasets.ImageFolder(val_dir, transform=transforms.ToTensor())
# To check the index for each classes
# print(val_dataset.class_to_idx)
test_loader = torch.utils.data.DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=8)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

input_shape = np.array(train_dataset[0][0]).shape
input_dim = input_shape[1]*input_shape[2]*input_shape[0]

class Flatten(nn.Module):
  """NN Module that flattens the incoming tensor."""
  def forward(self, input):
    return input.view(input.size(0), -1)

def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)

class BasicBlock(nn.Module):
    expansion = 1
    
    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(BasicBlock, self).__init__()
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = nn.BatchNorm2d(planes)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = nn.BatchNorm2d(planes)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        if self.downsample is not None:
            residual = self.downsample(x)
        out += residual
        out = self.relu(out)
        return out
   
  
class ConvModel(nn.Module):
  def __init__(self):
    super(ConvModel, self).__init__()
    self.net = nn.Sequential(
        
      nn.Conv2d(3, 32, kernel_size = 3, stride=1, padding=1),
      nn.BatchNorm2d(32),
      nn.ReLU(),
      nn.Dropout(0.2),
      
      BasicBlock(32, 32, stride=1),
      BasicBlock(32, 32, stride=1),
      
      BasicBlock(32, 64, stride=2, 
                 downsample=nn.Sequential(nn.Conv2d(32,64,kernel_size = 1, stride=2),
                                         nn.BatchNorm2d(64))),
      BasicBlock(64, 64, stride=1),
      BasicBlock(64, 64, stride=1),
      BasicBlock(64, 64, stride=1),
        
      #nn.MaxPool2d(kernel_size=2, stride=2),
        
      BasicBlock(64, 128, stride=2, 
                 downsample=nn.Sequential(nn.Conv2d(64,128,kernel_size = 1, stride=2),
                                         nn.BatchNorm2d(128))),
      BasicBlock(128, 128, stride=1),
      BasicBlock(128, 128, stride=1),
      BasicBlock(128, 128, stride=1),
      
      BasicBlock(128, 256, stride=2, 
                 downsample=nn.Sequential(nn.Conv2d(128,256,kernel_size = 1, stride=2),
                                         nn.BatchNorm2d(256))),
      BasicBlock(256, 256, stride=1),
        
      nn.MaxPool2d(kernel_size=2, stride=2),
      Flatten(),
      #nn.Linear(1024,500),
      #nn.ReLU(),
      nn.Linear(4096,200))
    
  def forward(self, x):
    return self.net(x)

step = 0
start_time = time.time()
model = ConvModel().to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate, weight_decay=0.001)
scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='max', factor=0.2, patience=0, verbose=True, min_lr=0.0001)
epoch_list,train_acc_list,test_acc_list = [],[],[]

for epoch in range(num_epochs):
  
  correct = 0
  total = 0
  total_loss = 0
  ## Train
  model.train()
  for images,labels in train_loader:
    images = images.to(device)
    labels = labels.to(device)
    #Forward Pass
    outputs = model(images)

    loss = criterion(outputs,labels)
    _,predicted = torch.max(outputs.data,1)
    total += labels.size(0)
    correct += (predicted == labels).sum().item()
    #Backward and optimize
    optimizer.zero_grad()
    loss.backward()
    if(epoch>6):
        for group in optimizer.param_groups:
            for p in group['params']:
                state = optimizer.state[p]
                if 'step' in state.keys():
                    if(state['step']>=1024):
                        state['step'] = 1000
    total_loss += loss.item()
    optimizer.step()
    step += 1
    train_accuracy = correct/total
    train_loss = total_loss/step

  ## Test
  model.eval()
  with torch.no_grad():
    correct = 0
    total = 0
    for images,labels in test_loader:
      images, labels = images.to(device), labels.to(device)
      outputs = model(images)
      _, predicted = torch.max(outputs.data,1)
      total += labels.size(0)
      correct += (predicted == labels).sum().item()
    test_accuracy = correct/total
    
    
    epoch_list.append(epoch)
    train_acc_list.append(train_accuracy)
    test_acc_list.append(test_accuracy)
    print('Epoch {}, Time {:.4f}, Loss: {:.4f}, Train Accuracy: {:.4f}, Test Accuracy: {:.4f}'.format(
        epoch,time.time()-start_time,train_loss,train_accuracy,test_accuracy))
  scheduler.step(test_accuracy)
  if test_accuracy > 0.5:
    break
import pandas
df = pandas.DataFrame(data={'num_epochs': epoch_list, "train_accuracy": train_acc_list, 'test_acc_list':test_acc_list})
df.to_csv("./resnet_tinyimagenet.csv", sep=',',index=False)

