# -*- coding: utf-8 -*-
"""HW4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jY9B_jlFop0hQlMvFdeFVK3JAR315Of_
"""
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
#from torchvision import datasets, transforms
from torch.autograd import Variable
#from torchvision import transforms
#from PIL import Image
import torch.distributed as dist


import os
import subprocess
from mpi4py import MPI

cmd = "/sbin/ifconfig"
out, err = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,
    stderr=subprocess.PIPE).communicate()
ip = str(out).split("inet addr:")[1].split()[0]

name = MPI.Get_processor_name()
comm = MPI.COMM_WORLD
rank = comm.Get_rank()
num_nodes = int(comm.Get_size())

ip = comm.gather(ip)

if rank != 0:
  ip = None

ip = comm.bcast(ip, root=0)

os.environ['MASTER_ADDR'] = ip[0]
os.environ['MASTER_PORT'] = '2222'

backend = 'mpi'
dist.init_process_group(backend, rank=rank, world_size=num_nodes)

dtype = torch.FloatTensor

# Your code

import torch
import torch.utils.data
import torchvision
import torchvision.transforms as transforms
import time
import torch.nn as nn
import numpy as np
from torch import optim

# We provide the code for loading CIFAR100 data
num_epochs = 50
batch_size = 128
learning_rate = 0.001
# torch.manual_seed(0)
transform_train = transforms.Compose([
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

transform_test = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])


train_dataset = torchvision.datasets.CIFAR100(root='~/scratch/', train=False, download=True, transform=transform_train)
train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=0)

test_dataset = torchvision.datasets.CIFAR100(root='~/scratch/', train=False, download=False, transform=transform_test)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=0)


#device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

input_shape = np.array(train_dataset[0][0]).shape
input_dim = input_shape[1]*input_shape[2]*input_shape[0]

class Flatten(nn.Module):
  """NN Module that flattens the incoming tensor."""
  def forward(self, input):
    return input.view(input.size(0), -1)

def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)

class BasicBlock(nn.Module):
    expansion = 1
    
    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(BasicBlock, self).__init__()
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = nn.BatchNorm2d(planes)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = nn.BatchNorm2d(planes)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        if self.downsample is not None:
            residual = self.downsample(x)
        out += residual
        out = self.relu(out)
        return out
   
  
class ConvModel(nn.Module):
  def __init__(self):
    super(ConvModel, self).__init__()
    self.net = nn.Sequential(
        
      nn.Conv2d(3, 32, kernel_size = 3, stride=1, padding=1),
      nn.BatchNorm2d(32),
      nn.ReLU(),
      nn.Dropout(0.2),
      
      BasicBlock(32, 32, stride=1),
      BasicBlock(32, 32, stride=1),
      
      BasicBlock(32, 64, stride=2, 
                 downsample=nn.Sequential(nn.Conv2d(32,64,kernel_size = 1, stride=2),
                                         nn.BatchNorm2d(64))),
      BasicBlock(64, 64, stride=1),
      BasicBlock(64, 64, stride=1),
      BasicBlock(64, 64, stride=1),

      BasicBlock(64, 128, stride=2, 
                 downsample=nn.Sequential(nn.Conv2d(64,128,kernel_size = 1, stride=2),
                                         nn.BatchNorm2d(128))),
      BasicBlock(128, 128, stride=1),
      BasicBlock(128, 128, stride=1),
      BasicBlock(128, 128, stride=1),
      
      BasicBlock(128, 256, stride=2, 
                 downsample=nn.Sequential(nn.Conv2d(128,256,kernel_size = 1, stride=2),
                                         nn.BatchNorm2d(256))),
      BasicBlock(256, 256, stride=1),
        
      nn.MaxPool2d(kernel_size=2, stride=2),
      Flatten(),
      nn.Linear(1024,100))
    
  def forward(self, x):
    return self.net(x)

step = 0
start_time = time.time()

model = ConvModel()

#Make sure that all nodes have the same model
for param in model.parameters():
    tensor0 = param.data
    dist.all_reduce(tensor0, op=dist.reduce_op.SUM)
    param.data = tensor0/np.float(num_nodes)

model.cuda()

#model = ConvModel().to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate, weight_decay=0.001)
scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='max', factor=0.2, patience=1, verbose=True, min_lr=0.0001)
epoch_list,train_acc_list,test_acc_list = [],[],[]

for epoch in range(num_epochs):
  
  correct = 0
  total = 0
  total_loss = 0
  ## Train
  model.train()
  for images,labels in train_loader:
    images = Variable(images).cuda()
    labels = Variable(labels).cuda()
    #Forward Pass
    outputs = model(images)

    loss = criterion(outputs,labels)
    prediction = outputs.data.max(1)[1]
    correct += ( float( prediction.eq(labels.data).sum() ) /float(batch_size)  ) *100.0
    total += 1
    optimizer.zero_grad()
    loss.backward()
    if(epoch>6):
        for group in optimizer.param_groups:
            for p in group['params']:
                state = optimizer.state[p]
                if 'step' in state.keys():
                    if(state['step']>=1024):
                        state['step'] = 1000
    
    for param in model.parameters():
            tensor0 = param.grad.data.cpu()
            dist.all_reduce(tensor0, op=dist.reduce_op.SUM)
            tensor0 /= float(num_nodes)
            param.grad.data = tensor0.cuda()

    optimizer.step()
    step += 1
    train_accuracy = correct/total

  ## Test
  model.eval()
  correct = 0
  total = 0
  for images,labels in test_loader: 
    images, labels = Variable(images,volatile = True).cuda(), Variable(labels,volatile = True).cuda()
    outputs = model(images)
    prediction = outputs.data.max(1)[1]
    correct += ( float( prediction.eq(labels.data).sum() ) /float(batch_size)  ) *100.0
    total += 1
  test_accuracy = correct/total
    
  epoch_list.append(epoch)
  train_acc_list.append(train_accuracy)
  test_acc_list.append(test_accuracy)
  print('Epoch {}, Time {:.4f}, Train Accuracy: {:.4f}, Test Accuracy: {:.4f}'.format(
        epoch,time.time()-start_time,train_accuracy,test_accuracy))
  scheduler.step(test_accuracy)

  if test_accuracy > 60.0:
    break

import pandas
df = pandas.DataFrame(data={'num_epochs': epoch_list, "train_accuracy": train_acc_list, 'test_acc_list':test_acc_list})
df.to_csv("./resnet_cifar100.csv", sep=',',index=False)

